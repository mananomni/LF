lwc demo --> data table show record using wire
apex --> simple already there
flow --> need to think(Check if already created can be shown)
batch --> example
queable --> example

What is nebulla logger and why we use it ?

	1. Easily add log entries via Apex, Lightning Components (lwc & aura), Flow & Process Builder to generate 1 consolidate log
	2. Manage & report on logging data using the Log__c and LogEntry__c objects
	3. Leverage LogEntryEvent__e platform events for real-time monitoring & integrations
	4. Enable logging and set the logging level for different users & profiles using LoggerSettings__c custom hierarchy setting.
	5. Automatically mask sensitive data by configuring LogEntryDataMaskRule__mdt custom metadata rules
	6. View related log entries on any Lighting SObject flexipage by adding the 'Related Log Entries' component in App Builder
	7. Dynamically assign tags to Log__c and LogEntry__c records for tagging/labeling your logs



We have 4 PS to have access controlled

	1. LoggerLogCreator provides the explicit access to all Apex classes used to generate logs via Apex, Lightning Components, Flow or Process Builder
	2.LoggerEndUser provides access to generate logs, as well as read-only access to any log records shared with the user.
	3. LoggerLogViewer provides view-all access (read-only) to all log records. This does not provide access to generate logs.
	4. LoggerAdmin provides view-all and modify-all access to all log records.



Configure Logger Custom Setting



	1.The hierarchy custom settings object LoggerSettings__c is used to control the behavior of several aspects of the logging system. 
	2.It can be configured at the org, profile, and/or user levels
	3. Around 10 fields are there and some default values and their description is there
	ex : 
		IsEnabled__c = true --> Determine if logger runs for the specified user/profile or not
		LoggingLevel__c = debug --> ERROR,WARN,INFO,DEBUG,FINE,FINER,FINEST
		DefaultNumberOfDaysToRetainLogs__c = 14 --> Set Log__c.LogRetentionDate__c to keep like kbtk rahega without delete


For Masking data(https://github.com/jongpie/NebulaLogger/wiki/Configuring-Data-Mask-Rules)


	1. LogEntryDataMaskRule__mdt is used to mask sensitive data like credit card, ssn,aadhar etc.
	2. Pre-built rules are included for Visa CC, Mastercard CC, and SSN - additional rules can be configured by creating additional LogEntryDataMaskRule__mdt records.
	3. Using the hiearchy custom setting LoggerSettings__c, we can choose to enable/data mask rules at the org, profile or user-level.

	Show example 
		Logger.error('Here is my fake Visa credit card 4000-1111-2222-0004, please don\'t steal it').addTag('data masking rule').addTag('credit card masking');
		Logger.warn('Here is my fake Mastercard credit card 5000-1111-2222-0005, please don\'t steal it').addTag('data masking rule').addTag('credit card masking');
		Logger.info('In case you want to steal my identity, my fake social is 400-11-9999, thanks', currentUser).addTag('data masking rule').addTag('an informational tag');
		Logger.saveLog();



Logging logs in Apex


	1. Logger class has several methods , can be used to add entries with different logging levels. Each logging level's method has several overloads to support multiple parameters.
	
	example :

		// This will generate a debug statement within developer console
		System.debug('Debug statement using native Apex');

		// This will create a new `Log__c` record with multiple related `LogEntry__c` records
		Logger.error('Add log entry using Nebula Logger with logging level == ERROR');
		Logger.warn('Add log entry using Nebula Logger with logging level == WARN');
		Logger.info('Add log entry using Nebula Logger with logging level == INFO');
		Logger.debug('Add log entry using Nebula Logger with logging level == DEBUG');
		Logger.fine('Add log entry using Nebula Logger with logging level == FINE');
		Logger.finer('Add log entry using Nebula Logger with logging level == FINER');
		Logger.finest('Add log entry using Nebula Logger with logging level == FINEST');
		Logger.saveLog()

		This results in 1 Log__c record with several related LogEntry__c records.
		Show in code with a scenario

	2. Within Apex, there are several different methods that you can use that provide greater control over the logging system. Like for
	
	3. Some additional apex Logger method can be used to control how logs are saved
		a. Logger.suspendSaving() – causes Logger to ignore any calls to saveLog() in the current transaction until resumeSaving() is called. 
		b. Logger.resumeSaving() – re-enables saving after suspendSaving() is used
		c. Logger.flushBuffer() – discards any unsaved log entries

	4. Track Related Logs in Batchable and Queuable jobs
		1. In apex async jobs like batch and queable runs in different transaction --Each with unique id
		2. To related the jobs with the original log we can use Logger.setParentLogTransactionId(String).
		3. Logger use this String value to relate log__c using log__c.ParentLog__c

	5. Show the example for batch class
		code : https://github.com/jongpie/NebulaLogger/wiki/Logger-for-Apex

	6. Track related logs in Queuable jobs
		code : https://github.com/jongpie/NebulaLogger/wiki/Logger-for-Apex

	7. Overloads for Logging Methods
		Each of the logging methods in Logger (such as Logger.error(), Logger.debug(), and so on) has several static overloads for various parameters.
		Example : 
			Log a message and a record - Logger.error(String message, SObject record)
			Log a message and a record ID - Logger.error(String message, Id recordId)
			Log a message and a save result - Logger.error(String message, Database.SaveResult saveResult)
			and so on ..................

	8. Using fluent interface
		a. methods in Logger returns an instance of the class LogEntryEventBuilder.
		b. this class provides several additional methods together to further customize each log entry
		
		Example : 
			// Get the current user so we can log it (just as an example of logging an SObject)
			User currentUser = [SELECT Id, Name, Username, Email FROM User WHERE Id = :UserInfo.getUserId()];

			// Using static Logger method overloads
			Logger.debug('my string', currentUser);

			// Using the instance of LogEntryEventBuilder
			LogEntryEventBuilder builder = Logger.debug('my string');
			builder.setRecord(currentUser);

			// Chaining builder methods together
			Logger.debug('my string').setRecord(currentUser);

			// Save all of the log entries
			Logger.saveLog();

		c. These all three methods genearte the same logs

Features for Flow Builders

	1. there are 4 invocable actions that you can use to leverage Nebula Logger

		1. Add Log Entry - uses the class FlowLogEntry to add a log entry with a specified message
		2. Add Log Entry for an SObject Record - uses the class FlowRecordLogEntry to add a log entry with a specified message for a particular SObject record
		3. Add Log Entry for an SObject Record Collection - class FlowCollectionLogEntry to add  log entry with a specified message for an SObject record collection
		4. Save Log - uses the class Logger to save any pending logs

Logger for LWC(https://github.com/jongpie/NebulaLogger/wiki/Logger-for-Components)
	1. the logger lwc provides very similar functionality that is offered in Apex. 
	2. Simply embed the logger lwc in your component, and call the desired logging methods within your code.
	Example : 

		// For lwc, retrieve logger from your component's template
		const logger = this.template.querySelector("c-logger");

		logger.error("Hello, world!").addTag("some important tag");
		logger.warn("Hello, world!");
		logger.info("Hello, world!");
		logger.debug("Hello, world!");
		logger.fine("Hello, world!");
		logger.finer("Hello, world!");
		logger.finest("Hello, world!");
		logger.saveLog();

Tagging Log Entries
	1. Adding Tags in Apex
		a. In apex we have , 2 new methods in LogEntryBuilder to add tags - LogEntryEventBuilder.addTag(String) and LogEntryEventBuilder.addTags(List<String>).
		Example : 	
			// Use addTag(String tagName) for adding 1 tag at a time
			Logger.debug('my log message').addTag('some tag').addTag('another tag');

			// Use addTags(List<String> tagNames) for adding a list of tags in 1 method call			
			List<String> myTags = new List<String>{'some tag', 'another tag'};
			Logger.debug('my log message').addTags(myTags);

	2. Adding Tags in Flow
		This feature is available for all 3 Flow classes: FlowLogEntry, FlowRecordLogEntry and FlowCollectionLogEntry.

	3. Adding Tags with Custom Metadata Records
		We can configure LogEntryTagRule__mdt to have tagging rule
		Rule-based tags are only added when LogEntry__c records are created (not on update).
		Rule-based tags are added in addition to any tags that have been added via Apex and/or Flow.
		Each rule is configured to apply tags based on the value of a single field on LogEntry__c (e.g., LogEntry__c.Message__c).
		Each rule can only evaluate 1 field, but multiple rules can evaluate the same field.
		A single rule can apply mulitple tags. When specifying multiple tags, put each tag on a separate line within the Tags field (LogEntryTagRule__mdt.Tags__c).

		for more detais : https://github.com/jongpie/NebulaLogger/wiki/Tagging-Log-Entries

For Choosing a Tagging Mode : https://github.com/jongpie/NebulaLogger/wiki/Tagging-Log-Entries 

-----------------------------------------
Log Management
-----------------------------------------
1. Logger Console app provide access to 
	Home
	Logger Scenario
	Log__c custom object
	LogEntry__c custom object
	LogEntryTag__c custom object
	LoggerTag__c custom object
	Reports standard tab
	Dashboard standard tab

2. Managing Logs
	'Manage' Quick Action - prvide edit to all editable field of Log__c
	Some fields are automatically set when the Log__c.Status changes like if closed then closedBy , closedDtae , isClosed ,isResolved
	Open Viewer quick action give option to view the json format of record

3. Related Log Entries Component
	The component automatically shows any related log entries, based on LogEntry__c.RecordId__c == :recordId
	Search the list of log entries for a particular record using the component's built-insearch box. The component dynamically searches all related log entries using SOSL.
	Component automatically enforces Salesforce's security model
		Object-Level Security - Users without read access to LogEntry__c will not see the component
		Record-Level Security - Users will only see records that have been shared with them
		Field-Level Security - Users will only see the fields within the field set that they have access to
4. Deleting old Records
	1. Mass Deleting with List Views
	2. Batch Deleting with Apex Jobs
		a. LogBatchPurger - this batch Apex class will delete any Log__c records with Log__c.LogRetentionDate__c <= System.today().
			i.  By default, this field is populated with "TODAY + 14 DAYS" - the number of days to retain a log can be customized in LoggerSettings__c.
			ii. Admins can also manually edit this field to change the retention date - or set it to null to prevent the log from being automatically deleted
		b.LogBatchPurgeScheduler - this schedulable Apex class can be schedule to run LogBatchPurger on a daily or weekly basis



plugin framework visist documentation



